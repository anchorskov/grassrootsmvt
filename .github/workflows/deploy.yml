---
name: "Deploy to Cloudflare Pages"

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: "üöÄ Deploy to Cloudflare Pages"
    runs-on: ubuntu-latest

    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      PROJECT: grassrootsmvt

    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4

      - name: "üß∞ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: "‚ö° Cache npm dependencies"
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('ui/functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: "üß∞ Install Wrangler CLI (optional cached)"
        run: |
          echo "Installing wrangler (will use cache when available)..."
          npm install -g wrangler@4.42.1 || true

      - name: "üì¶ Install deterministic dependencies for functions"
        run: |
          echo "üì¶ Checking for ui/functions/package.json..."
          if [[ -f "ui/functions/package.json" ]]; then
            if [[ -f "ui/functions/package-lock.json" ]]; then
              npm ci --prefix ui/functions --omit=dev --no-audit --no-fund
            else
              npm install --prefix ui/functions --omit=dev --no-audit --no-fund
            fi
          else
            echo "No ui/functions/package.json found ‚Äî skipping dependency install."
          fi

      - name: "üèóÔ∏è Build Cloudflare Pages Functions"
        working-directory: ui
        run: |
          echo "üèóÔ∏è Building Cloudflare Pages Functions..."
          mkdir -p .wrangler/functions-build
          if [[ -d "functions" ]]; then
            npx wrangler@4.42.1 pages functions build functions --outdir .wrangler/functions-build
          else
            echo "No functions directory found, skipping build."
          fi

      - name: "üöÄ Deploy to Cloudflare Pages"
        working-directory: ui
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üöÄ Deploying Cloudflare Pages from ui/..."
          set -o pipefail
          npx wrangler@4.42.1 pages deploy . --project-name=grassrootsmvt --commit-dirty=true 2>&1 | tee deploy.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "‚ùå wrangler deploy failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi
      - name: "üì¶ Upload deploy log"
        uses: actions/upload-artifact@v4
        with:
          name: deploy-log
          path: ui/deploy.log

      - name: "‚úÖ Verify Cloudflare deployment"
        working-directory: ui
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          node ../scripts/verify_deploy.mjs --project grassrootsmvt --retries 5 --interval 5000

      - name: "üì¶ Upload verification logs"
        uses: actions/upload-artifact@v4
        with:
          name: verification-results
          path: |
            verify__api_*.txt

      - name: "üîé Lint this workflow with yamllint"
        run: |
          python -m pip install --upgrade pip
          pip install yamllint
          yamllint -c .yamllint .github/workflows/deploy.yml
