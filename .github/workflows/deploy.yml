name: Deploy Pages (build + verify functions)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Functions dependencies
        shell: bash
        run: |
          set -euo pipefail
          FUNCTIONS_DIR="ui/functions"

          if [[ -f "${FUNCTIONS_DIR}/package.json" ]]; then
            echo "üì¶ Installing dependencies in ${FUNCTIONS_DIR}"
            cd "${FUNCTIONS_DIR}"

            if [[ -f package-lock.json ]]; then
              echo "Using npm ci (lockfile detected)"
              npm ci --omit=dev --no-audit --no-fund
            else
              echo "No lockfile found ‚Äî using npm install"
              npm install --omit=dev --no-audit --no-fund
            fi
          else
            echo "‚ö†Ô∏è No ${FUNCTIONS_DIR}/package.json found ‚Äî skipping Functions dependency install"
          fi

      - name: "Debug: list ui directory"
        run: |
          echo "--- ui top-level ---"
          ls -la ui || true
          echo "--- ui recursive ---"
          ls -R ui | sed -n '1,400p' || true

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          npx wrangler@4.42.0 pages deploy ./ui \
            --project-name=grassrootsmvt \
            --branch=main \
            --commit-dirty=true

      - name: Verify deployment includes functions via Cloudflare API
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          DEP_JSON=$(curl -sS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments?per_page=1")
          echo "$DEP_JSON" | jq '.result[0] | {id: .id, uses_functions: .uses_functions, url: .url}'
          USES=$(echo "$DEP_JSON" | jq -r '.result[0].uses_functions')
          if [ "$USES" != "true" ]; then
            echo "‚ùå Deployment missing Functions (uses_functions=$USES)"
            exit 1
          fi
          echo "‚úÖ Deployment includes Functions (uses_functions=true)"
