name: "üöÄ Deploy Pages (build + verify functions)"

on:
  push:
    branches: [ main ]

jobs:
  validate:
    name: "üß™ Validate Workflows"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4

      - name: "üß∞ Setup Python & Node"
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: "üß™ Install YAML validators"
        run: |
          python -m pip install --upgrade pip
          pip install yamllint
          npm install -g js-yaml

      - name: "üîç Lint workflow YAML files"
        run: |
          echo "üß© Running yamllint..."
          yamllint .github/workflows || { echo "‚ùå yamllint failed"; exit 1; }
          echo "üß© Validating syntax with js-yaml..."
          for f in .github/workflows/*.yml; do
            npx js-yaml "$f" >/dev/null || { echo "‚ùå Invalid YAML in $f"; exit 1; }
          done
          echo "‚úÖ YAML syntax OK."

      - name: "üìÇ Check working-directory consistency"
        run: |
          echo "üîç Ensuring all wrangler/pages commands run from ui/..."
          BAD=$(grep -rE "npx[[:space:]]+wrangler|pages[[:space:]]+(deploy|functions[[:space:]]+build)" .github/workflows | grep -v "working-directory:[[:space:]]*ui" || true)
          if [[ -n "$BAD" ]]; then
            echo "‚ùå Found workflow commands not scoped to ui/:"
            echo "$BAD"
            exit 1
          fi
          echo "‚úÖ All wrangler commands correctly scoped to ui/."

  deploy:
    name: "üöÄ Deploy Pages (build + verify functions)"
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      PROJECT: grassrootsmvt

    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4

      - name: "üß∞ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: "üì¶ Install deterministic dependencies"
        run: |
          echo "üì¶ Installing dependencies in ui/functions"
          if [[ -f "ui/functions/package.json" ]]; then
            if [[ -f "ui/functions/package-lock.json" ]]; then
              echo "Found package-lock.json ‚Äî running npm ci"
              npm ci --prefix ui/functions --omit=dev --no-audit --no-fund
            else
              echo "No lockfile found ‚Äî running npm install"
              npm install --prefix ui/functions --omit=dev --no-audit --no-fund
            fi
          else
            echo "‚ö†Ô∏è ui/functions/package.json not found ‚Äî skipping function dependency install"
          fi

      - name: "üß™ Preflight: check required files"
        run: |
          echo "üîç Running preflight checks for required files..."
          if [[ -f "scripts/preflight_check.sh" ]]; then
            bash scripts/preflight_check.sh
          else
            echo "‚ö†Ô∏è preflight_check.sh not found ‚Äî skipping file validation"
          fi

      - name: "üèóÔ∏è Build Cloudflare Pages Functions"
        run: |
          echo "üèóÔ∏è Building Pages Functions (ui/functions)..."
          mkdir -p ui/.wrangler/functions-build
          if [[ -d "ui/functions" ]]; then
            npx wrangler@4.42.1 pages functions build ui/functions --outdir ui/.wrangler/functions-build
          else
            echo "ui/functions not present ‚Äî skipping functions build"
          fi

      - name: "üî¢ Compute SHA256 and upload functions bundle artifact"
        run: |
          echo "üî¢ Computing SHA256 for built functions bundle..."
          mkdir -p ui/.wrangler/functions-build
          cd ui/.wrangler/functions-build
          if [[ -f index.js ]]; then
            sha256sum index.js > sha256.txt
            echo "‚úÖ SHA256 computed:"
            cat sha256.txt
          else
            echo "‚ùå index.js missing, writing MISSING_BUNDLE.txt"
            echo "Bundle missing at build time" > MISSING_BUNDLE.txt
          fi
        continue-on-error: true

      - name: "üì¶ Upload built functions bundle artifact"
        uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: |
            ui/.wrangler/functions-build/index.js
            ui/.wrangler/functions-build/sha256.txt
            ui/.wrangler/functions-build/MISSING_BUNDLE.txt

      - name: "üöÄ Deploy to Cloudflare Pages"
        working-directory: ui
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üöÄ Deploying to Cloudflare Pages from ui/"
          npx wrangler@4.42.1 pages deploy . \
            --project-name=grassrootsmvt \
            --commit-dirty=true

      - name: "‚úÖ Verify deployment includes functions"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          echo "üîç Checking latest deployment metadata..."
          DEP_JSON=$(curl -sS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments?per_page=1")
          echo "$DEP_JSON" | jq '.result[0] | {id: .id, uses_functions: .uses_functions, url: .url}'
          USES=$(echo "$DEP_JSON" | jq -r '.result[0].uses_functions')
          if [ "$USES" != "true" ]; then
            echo "‚ùå Deployment missing Functions (uses_functions=$USES)"
            exit 1
          fi
          echo "‚úÖ Functions detected in deployment."

      - name: "üîé Verify deployment health"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          DEPLOY_URL=$(curl -sSf -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments?per_page=1" \
            | jq -r '.result[0].url')
          echo "Checking $DEPLOY_URL/api/ping..."
          if ! curl -sSf "$DEPLOY_URL/api/ping"; then
            echo "‚ùå Failed to reach $DEPLOY_URL/api/ping"
            exit 1
          else
            echo "‚úÖ /api/ping reachable"
          fi

      - name: "üßæ Verify Cloudflare deployment endpoints"
        working-directory: ui
        run: |
          echo "Running deployment verification..."
          node ../scripts/verify_deploy.mjs --project grassrootsmvt --retries 5 --interval 5000

      - name: "üì¶ Upload verification logs"
        uses: actions/upload-artifact@v4
        with:
          name: verification-results
          path: ui/verify__api_*.txt
