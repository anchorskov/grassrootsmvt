name: Deploy Pages (build + verify functions)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deterministic dependencies
        run: |
          echo "üì¶ Installing dependencies in ui/functions"
          if [[ -f "ui/functions/package.json" ]]; then
            if [[ -f "ui/functions/package-lock.json" ]]; then
              echo "Found package-lock.json ‚Äî running npm ci"
              npm ci --prefix ui/functions --omit=dev --no-audit --no-fund
            else
              echo "No lockfile found ‚Äî using npm install"
              npm install --prefix ui/functions --omit=dev --no-audit --no-fund
            fi
          else
            echo "‚ö†Ô∏è ui/functions/package.json not found ‚Äî skipping function dependency install"
          fi

      - name: Debug list ui/functions
        run: |
          echo "Listing Cloudflare functions directory:"
          ls -R ui/functions || echo "Functions directory missing!"

      - name: Deep debug list functions
        run: |
          echo "Full tree of ui/functions:"
          find ui/functions -type f | sort || echo "No files found or directory missing"
          echo "File count:"
          find ui/functions -type f | wc -l || true

      - name: Verify Wrangler config
        run: |
          echo "Validating wrangler.toml..."
          cat wrangler.toml || echo "wrangler.toml not found in repo root"

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üöÄ Deploying to Cloudflare Pages (ui/)..."
          # If a .env file exists in the workspace, pass it to wrangler for local env vars.
          ENV_FLAG=""
          if [[ -f ".env" ]]; then
            echo "Found .env ‚Äî passing --env-file .env to wrangler"
            ENV_FLAG="--env-file .env"
          fi

          # Run a quick env sanity check (will fail the job if secrets are missing)
          bash scripts/check_env.sh || (echo "Env sanity check failed" && exit 1)

          npx wrangler@4.42.0 pages deploy ui \
            --project-name=grassrootsmvt \
            --commit-dirty=true \
            --env-file .env

      - name: Verify deployment includes functions
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          DEP_JSON=$(curl -sS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments?per_page=1")
          echo "$DEP_JSON" | jq '.result[0] | {id: .id, uses_functions: .uses_functions, url: .url}'
          USES=$(echo "$DEP_JSON" | jq -r '.result[0].uses_functions')
          if [ "$USES" != "true" ]; then
            echo "‚ùå Deployment missing Functions (uses_functions=$USES)"
            exit 1
          fi
          echo "‚úÖ Functions detected."

      - name: Verify deployment health
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          DEPLOY_URL=$(curl -sSf -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments?per_page=1" \
            | jq -r '.result[0].url')
          echo "Checking $DEPLOY_URL/api/ping..."
          curl -sSf "$DEPLOY_URL/api/ping" || (echo "‚ùå Failed to reach $DEPLOY_URL/api/ping" && exit 1)

      - name: ‚úÖ Verify Cloudflare deployment
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT: grassrootsmvt
        run: |
          node scripts/verify_deploy.mjs

      - name: "üì¶ Upload verification logs"
        uses: actions/upload-artifact@v4
        with:
          name: verification-results
          path: verify__api_*.txt
