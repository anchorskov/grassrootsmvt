GrassrootsMVT :: Debug Pack
Timestamp (UTC): 2025-10-02_180437
CWD: /home/anchor/projects/grassrootsmvt

== Versions ==
wrangler: 4.40.2
node: v20.19.5
npm: 11.6.1

== Git ==
main
 D ui/functions/api/admin/_auth.ts
 D ui/functions/api/admin/contacts/recent.ts
 D ui/functions/api/admin/followups.ts
 D ui/functions/api/admin/health.ts
 D ui/functions/api/call/complete.ts
 D ui/functions/api/call/next.ts
 D ui/functions/api/whoami.ts
 M ui/index.html
?? .dev.vars
?? DEBUG_NOTES.txt
?? _dist/
?? ui/_routes.json
?? ui/functions/api/call/complete.js
?? ui/functions/api/call/next.js
?? ui/functions/api/canvass/
?? ui/functions/api/filters/
?? ui/functions/api/ping.js
?? ui/functions/api/testpost.js
?? ui/functions/api/whoami.js
?? ui/functions/hello.js
?? ui/volunteer/
?? wrangler.toml

== Tree (depth 4) ==
.
├── DEBUG_NOTES.txt
├── README.md
├── _dist
│   └── grassrootsmvt-local_2025-10-02_164801.zip
├── api
│   ├── ci-ping.txt
│   ├── node_modules
│   ├── src
│   │   ├── globals.d.ts
│   │   └── index.ts
│   └── wrangler.toml
├── db
│   ├── migrations
│   └── schema
│       ├── eligible_view_stub.sql
│       └── volunteer_schema.sql
├── docs
├── infra
├── node_modules
├── ui
│   ├── _routes.json
│   ├── admin
│   │   └── index.html
│   ├── ci-ping.txt
│   ├── functions
│   │   ├── api
│   │   │   ├── admin
│   │   │   ├── call
│   │   │   ├── canvass
│   │   │   ├── filters
│   │   │   ├── ping.js
│   │   │   ├── testpost.js
│   │   │   └── whoami.js
│   │   └── hello.js
│   ├── index.html
│   ├── node_modules
│   └── volunteer
│       ├── canvass.html
│       └── phone.html
└── wrangler.toml

20 directories, 20 files

== Root wrangler.toml (Pages/D1 binding) ==
compatibility_date = "2025-09-24"

== Pages routes (ui/_routes.json) ==
{
  "version": 1,
  "include": ["/hello", "/api/*"]
}

== Functions present ==
ui/functions/api/call/complete.js
ui/functions/api/call/next.js
ui/functions/api/canvass/list.js
ui/functions/api/filters/counties.js
ui/functions/api/filters/districts.js
ui/functions/api/filters/states.js
ui/functions/api/ping.js
ui/functions/api/testpost.js
ui/functions/api/whoami.js
ui/functions/hello.js

== Admin & UI files present ==
ui/admin/index.html
ui/index.html
ui/volunteer/canvass.html
ui/volunteer/phone.html
ui/admin/index.html

== API helper in ui/index.html ==
91:window.API = (p) => '/api' + p;

== D1 quick sanity (local dev) ==

 ⛅️ wrangler 4.40.2 (update available 4.41.0)
─────────────────────────────────────────────

(skipped/failed)

== Curl checks (if dev running on 127.0.0.1:8788) ==
-- /hello
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="robots" content="noindex, nofollow" />
<title>Volunteers</title>
<style>
  body { font-family: system-ui, sans-serif; margin: 1rem; max-width: 720px; }
  .card { border: 1px solid #ddd; border-radius: 12px; padding: 1rem; margin: 1rem 0; box-shadow: 0 1px 2px rgba(0,0,0,.04); }
  label { display:block; margin:.5rem 0 .25rem; }
  input[type=text], select, textarea { width: 100%; padding:.6rem; border:1px solid #ccc; border-radius:8px; }
  button { padding:.6rem 1rem; border-radius:8px; border:0; background:#0ea5e9; color:white; font-weight:600; cursor:pointer; }
  button.secondary { background:#e2e8f0; color:#0f172a; }
  .row { display:flex; gap:.75rem; flex-wrap: wrap; }
  .row > * { flex:1 1 200px; }
  .muted { color:#64748b; }
  .error { color:#b91c1c; }
  .toolbar { display:flex; gap:.5rem; align-items:center; }
</style>

<h1 style="display:flex;justify-content:space-between;align-items:center;">
  <span>Volunteer Call</span>
  <span class="toolbar">
    <button id="getNextBtn" onclick="nextVoter()" style="padding:8px 12px;border-radius:6px;background:#6aa9ff;color:#fff;border:none;">Get Next</button>
  </span>
</h1>

<div class="card" id="whoami">Checking login…</div>

<div class="card" id="voterCard" hidden>
  <div id="voterInfo" class="muted"></div>

  <h3>Call outcome</h3>
  <label for="outcome">Outcome</label>
  <select id="outcome">
    <option value="">— choose —</option>
    <option>connected</option><option>vm</option><option>no_answer</option>
    <option>wrong_number</option><option>refused</option><option>follow_up</option>
  </select>

  <div class="row">
    <label><input type="checkbox" id="ok_callback"> OK to call back</label>
    <label><input type="checkbox" id="requested_info"> Requested info</label>
    <label><input type="checkbox" id="dnc"> Do not call</label>
  </div>
  <div class="row">
    <div>
      <label for="best_day">Best day</label>
      <select id="best_day"><option value="">—</option>
        <option>Mon</option><option>Tue</option><option>Wed</option>
        <option>Thu</option><option>Fri</option><option>Sat</option><option>Sun</option>
      </select>
    </div>
    <div>
      <label for="best_time_window">Best time</label>
      <select id="best_time_window"><option value="">—</option>
        <option>Morning</option><option>Afternoon</option><option>Evening</option>
        <option>6–8pm</option>
      </select>
    </div>
  </div>

  <div class="row">
    <label><input type="checkbox" id="optin_sms"> Opt-in SMS</label>
    <label><input type="checkbox" id="optin_email"> Opt-in Email</label>
  </div>
  <label for="email">Email address (if provided)</label>
  <input type="text" id="email" placeholder="name@example.com"/>

  <div class="row">
    <label><input type="checkbox" id="wants_volunteer"> Wants to volunteer</label>
    <label><input type="checkbox" id="share_insights_ok"> OK to share insights</label>
  </div>
  <div class="row">
    <label><input type="checkbox" id="for_term_limits"> For term limits</label>
    <label><input type="checkbox" id="issue_public_lands"> Interested: public land sales</label>
  </div>
  <label for="comments">Comments</label>
  <textarea id="comments" rows="3"></textarea>

  <div class="row" style="margin-top:.75rem;">
    <button id="saveBtn">Save & Next</button>
    <button class="secondary" id="skipBtn" type="button">Skip</button>
  </div>
  <div id="msg" class="muted" style="margin-top:.5rem;"></div>
</div>

<div class="card" id="empty" hidden>No eligible voters (or not logged in).</div>

<script>
// Use same-origin Pages Functions API path.
window.API = (p) => '/api' + p;

const who = document.getElementById("whoami");
const voterCard = document.getElementById("voterCard");
const voterInfo = document.getElementById("voterInfo");
const empty = document.getElementById("empty");
const msg = document.getElementById("msg");

function setMsg(text, kind="muted") {
  msg.className = kind;
  msg.textContent = text || "";
}

async function jsonFetch(url, init = {}) {
  const r = await fetch(url, {
    credentials: "include",  // send Cloudflare Access cookies
    ...init,
    headers: { "content-type": "application/json", ...(init.headers || {}) },
  });
  if (r.status === 401) throw new Error("Unauthorized (Access required)");
  if (!r.ok) throw new Error(`HTTP ${r.status}`);
  const ct = r.headers.get("content-type") || "";
  return ct.includes("application/json") ? r.json() : r.text();
}

async function loadWho() {
  try {
    const j = await jsonFetch(API("/whoami"), { method:"GET", headers:{} });
    who.textContent = j && j.email ? ("Signed in as: " + j.email) : "Not signed in (Access required)";
  } catch (e) {
    who.innerHTML = `<span class="error">Unable to reach API: ${e.message}</span>`;
  }
}

async function nextVoter() {
  try {
    setMsg("Loading next voter…");
    const v = await jsonFetch(API("/call/next"), { method:"POST" });
    if (!v || !v.voter_id) {
      voterCard.hidden = true; empty.hidden = false; setMsg(""); return;
    }
    empty.hidden = true; voterCard.hidden = false;
    voterCard.dataset.voter = v.voter_id;
    const name = [v.first_name, v.last_name].filter(Boolean).join(" ");
    voterInfo.innerHTML =
      `<strong>${name || "—"}</strong><br/>` +
      `${v.ra_city || ""} ${v.ra_zip || ""} • Party: ${v.party || ""}<br/>` +
      `Phone: ${v.phone_e164 || "—"}`;
    setMsg("");
  } catch (e) {
    voterCard.hidden = true; empty.hidden = false;
    setMsg(`Error: ${e.message}`, "error");
  }
}

async function saveAndNext() {
  const payload = {
    voter_id: voterCard.dataset.voter || "",
    outcome: document.getElementById("outcome").value,
    ok_callback: +document.getElementById("ok_callback").checked,
    requested_info: +document.getElementById("requested_info").checked,
    dnc: +document.getElementById("dnc").checked,
    best_day: document.getElementById("best_day").value || null,
    best_time_window: document.getElementById("best_time_window").value || null,
    optin_sms: +document.getElementById("optin_sms").checked,
    optin_email: +document.getElementById("optin_email").checked,
    email: document.getElementById("email").value || null,
    wants_volunteer: +document.getElementById("wants_volunteer").checked,
    share_insights_ok: +document.getElementById("share_insights_ok").checked,
    for_term_limits: +document.getElementById("for_term_limits").checked,
    issue_public_lands: +document.getElementById("issue_public_lands").checked,
    comments: document.getElementById("comments").value || null
  };
  if (!payload.voter_id) { alert("No voter selected."); return; }
  if (!payload.outcome) { alert("Choose an outcome."); return; }

  try {
    setMsg("Saving…");
    await jsonFetch(API("/call/complete"), { method:"POST", body: JSON.stringify(payload) });
    // reset fields
    document.getElementById("outcome").value = "";
    document.getElementById("best_day").value = "";
    document.getElementById("best_time_window").value = "";
    document.getElementById("email").value = "";
    document.getElementById("comments").value = "";
    ["ok_callback","requested_info","dnc","optin_sms","optin_email",
     "wants_volunteer","share_insights_ok","for_term_limits","issue_public_lands"]
     .forEach(id => document.getElementById(id).checked = false);
    setMsg("Saved.", "muted");
    nextVoter();
  } catch (e) {
    setMsg(`Save failed: ${e.message}`, "error");
  }
}

document.getElementById("getNextBtn").addEventListener("click", nextVoter);
document.getElementById("saveBtn").addEventListener("click", saveAndNext);
document.getElementById("skipBtn").addEventListener("click", nextVoter);

// Keyboard shortcut: N = Get Next
window.addEventListener("keydown", (e) => {
  if (e.key.toLowerCase() === "n" && !e.metaKey && !e.ctrlKey && !e.altKey) {
    e.preventDefault();
    nextVoter();
  }
});

loadWho().then(nextVoter);
</script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const btn = document.getElementById("getNextBtn");
});
</script>
<script>window.getNext = typeof nextVoter!=="undefined" ? nextVoter : ()=>{};</script>



-- GET /api/whoami
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="robots" content="noindex, nofollow" />
<title>Volunteers</title>
<style>
  body { font-family: system-ui, sans-serif; margin: 1rem; max-width: 720px; }
  .card { border: 1px solid #ddd; border-radius: 12px; padding: 1rem; margin: 1rem 0; box-shadow: 0 1px 2px rgba(0,0,0,.04); }
  label { display:block; margin:.5rem 0 .25rem; }
  input[type=text], select, textarea { width: 100%; padding:.6rem; border:1px solid #ccc; border-radius:8px; }
  button { padding:.6rem 1rem; border-radius:8px; border:0; background:#0ea5e9; color:white; font-weight:600; cursor:pointer; }
  button.secondary { background:#e2e8f0; color:#0f172a; }
  .row { display:flex; gap:.75rem; flex-wrap: wrap; }
  .row > * { flex:1 1 200px; }
  .muted { color:#64748b; }
  .error { color:#b91c1c; }
  .toolbar { display:flex; gap:.5rem; align-items:center; }
</style>

<h1 style="display:flex;justify-content:space-between;align-items:center;">
  <span>Volunteer Call</span>
  <span class="toolbar">
    <button id="getNextBtn" onclick="nextVoter()" style="padding:8px 12px;border-radius:6px;background:#6aa9ff;color:#fff;border:none;">Get Next</button>
  </span>
</h1>

<div class="card" id="whoami">Checking login…</div>

<div class="card" id="voterCard" hidden>
  <div id="voterInfo" class="muted"></div>

  <h3>Call outcome</h3>
  <label for="outcome">Outcome</label>
  <select id="outcome">
    <option value="">— choose —</option>
    <option>connected</option><option>vm</option><option>no_answer</option>
    <option>wrong_number</option><option>refused</option><option>follow_up</option>
  </select>

  <div class="row">
    <label><input type="checkbox" id="ok_callback"> OK to call back</label>
    <label><input type="checkbox" id="requested_info"> Requested info</label>
    <label><input type="checkbox" id="dnc"> Do not call</label>
  </div>
  <div class="row">
    <div>
      <label for="best_day">Best day</label>
      <select id="best_day"><option value="">—</option>
        <option>Mon</option><option>Tue</option><option>Wed</option>
        <option>Thu</option><option>Fri</option><option>Sat</option><option>Sun</option>
      </select>
    </div>
    <div>
      <label for="best_time_window">Best time</label>
      <select id="best_time_window"><option value="">—</option>
        <option>Morning</option><option>Afternoon</option><option>Evening</option>
        <option>6–8pm</option>
      </select>
    </div>
  </div>

  <div class="row">
    <label><input type="checkbox" id="optin_sms"> Opt-in SMS</label>
    <label><input type="checkbox" id="optin_email"> Opt-in Email</label>
  </div>
  <label for="email">Email address (if provided)</label>
  <input type="text" id="email" placeholder="name@example.com"/>

  <div class="row">
    <label><input type="checkbox" id="wants_volunteer"> Wants to volunteer</label>
    <label><input type="checkbox" id="share_insights_ok"> OK to share insights</label>
  </div>
  <div class="row">
    <label><input type="checkbox" id="for_term_limits"> For term limits</label>
    <label><input type="checkbox" id="issue_public_lands"> Interested: public land sales</label>
  </div>
  <label for="comments">Comments</label>
  <textarea id="comments" rows="3"></textarea>

  <div class="row" style="margin-top:.75rem;">
    <button id="saveBtn">Save & Next</button>
    <button class="secondary" id="skipBtn" type="button">Skip</button>
  </div>
  <div id="msg" class="muted" style="margin-top:.5rem;"></div>
</div>

<div class="card" id="empty" hidden>No eligible voters (or not logged in).</div>

<script>
// Use same-origin Pages Functions API path.
window.API = (p) => '/api' + p;

const who = document.getElementById("whoami");
const voterCard = document.getElementById("voterCard");
const voterInfo = document.getElementById("voterInfo");
const empty = document.getElementById("empty");
const msg = document.getElementById("msg");

function setMsg(text, kind="muted") {
  msg.className = kind;
  msg.textContent = text || "";
}

async function jsonFetch(url, init = {}) {
  const r = await fetch(url, {
    credentials: "include",  // send Cloudflare Access cookies
    ...init,
    headers: { "content-type": "application/json", ...(init.headers || {}) },
  });
  if (r.status === 401) throw new Error("Unauthorized (Access required)");
  if (!r.ok) throw new Error(`HTTP ${r.status}`);
  const ct = r.headers.get("content-type") || "";
  return ct.includes("application/json") ? r.json() : r.text();
}

async function loadWho() {
  try {
    const j = await jsonFetch(API("/whoami"), { method:"GET", headers:{} });
    who.textContent = j && j.email ? ("Signed in as: " + j.email) : "Not signed in (Access required)";
  } catch (e) {
    who.innerHTML = `<span class="error">Unable to reach API: ${e.message}</span>`;
  }
}

async function nextVoter() {
  try {
    setMsg("Loading next voter…");
    const v = await jsonFetch(API("/call/next"), { method:"POST" });
    if (!v || !v.voter_id) {
      voterCard.hidden = true; empty.hidden = false; setMsg(""); return;
    }
    empty.hidden = true; voterCard.hidden = false;
    voterCard.dataset.voter = v.voter_id;
    const name = [v.first_name, v.last_name].filter(Boolean).join(" ");
    voterInfo.innerHTML =
      `<strong>${name || "—"}</strong><br/>` +
      `${v.ra_city || ""} ${v.ra_zip || ""} • Party: ${v.party || ""}<br/>` +
      `Phone: ${v.phone_e164 || "—"}`;
    setMsg("");
  } catch (e) {
    voterCard.hidden = true; empty.hidden = false;
    setMsg(`Error: ${e.message}`, "error");
  }
}

async function saveAndNext() {
  const payload = {
    voter_id: voterCard.dataset.voter || "",
    outcome: document.getElementById("outcome").value,
    ok_callback: +document.getElementById("ok_callback").checked,
    requested_info: +document.getElementById("requested_info").checked,
    dnc: +document.getElementById("dnc").checked,
    best_day: document.getElementById("best_day").value || null,
    best_time_window: document.getElementById("best_time_window").value || null,
    optin_sms: +document.getElementById("optin_sms").checked,
    optin_email: +document.getElementById("optin_email").checked,
    email: document.getElementById("email").value || null,
    wants_volunteer: +document.getElementById("wants_volunteer").checked,
    share_insights_ok: +document.getElementById("share_insights_ok").checked,
    for_term_limits: +document.getElementById("for_term_limits").checked,
    issue_public_lands: +document.getElementById("issue_public_lands").checked,
    comments: document.getElementById("comments").value || null
  };
  if (!payload.voter_id) { alert("No voter selected."); return; }
  if (!payload.outcome) { alert("Choose an outcome."); return; }

  try {
    setMsg("Saving…");
    await jsonFetch(API("/call/complete"), { method:"POST", body: JSON.stringify(payload) });
    // reset fields
    document.getElementById("outcome").value = "";
    document.getElementById("best_day").value = "";
    document.getElementById("best_time_window").value = "";
    document.getElementById("email").value = "";
    document.getElementById("comments").value = "";
    ["ok_callback","requested_info","dnc","optin_sms","optin_email",
     "wants_volunteer","share_insights_ok","for_term_limits","issue_public_lands"]
     .forEach(id => document.getElementById(id).checked = false);
    setMsg("Saved.", "muted");
    nextVoter();
  } catch (e) {
    setMsg(`Save failed: ${e.message}`, "error");
  }
}

document.getElementById("getNextBtn").addEventListener("click", nextVoter);
document.getElementById("saveBtn").addEventListener("click", saveAndNext);
document.getElementById("skipBtn").addEventListener("click", nextVoter);

// Keyboard shortcut: N = Get Next
window.addEventListener("keydown", (e) => {
  if (e.key.toLowerCase() === "n" && !e.metaKey && !e.ctrlKey && !e.altKey) {
    e.preventDefault();
    nextVoter();
  }
});

loadWho().then(nextVoter);
</script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const btn = document.getElementById("getNextBtn");
});
</script>
<script>window.getNext = typeof nextVoter!=="undefined" ? nextVoter : ()=>{};</script>



-- GET /api/ping
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="robots" content="noindex, nofollow" />
<title>Volunteers</title>
<style>
  body { font-family: system-ui, sans-serif; margin: 1rem; max-width: 720px; }
  .card { border: 1px solid #ddd; border-radius: 12px; padding: 1rem; margin: 1rem 0; box-shadow: 0 1px 2px rgba(0,0,0,.04); }
  label { display:block; margin:.5rem 0 .25rem; }
  input[type=text], select, textarea { width: 100%; padding:.6rem; border:1px solid #ccc; border-radius:8px; }
  button { padding:.6rem 1rem; border-radius:8px; border:0; background:#0ea5e9; color:white; font-weight:600; cursor:pointer; }
  button.secondary { background:#e2e8f0; color:#0f172a; }
  .row { display:flex; gap:.75rem; flex-wrap: wrap; }
  .row > * { flex:1 1 200px; }
  .muted { color:#64748b; }
  .error { color:#b91c1c; }
  .toolbar { display:flex; gap:.5rem; align-items:center; }
</style>

<h1 style="display:flex;justify-content:space-between;align-items:center;">
  <span>Volunteer Call</span>
  <span class="toolbar">
    <button id="getNextBtn" onclick="nextVoter()" style="padding:8px 12px;border-radius:6px;background:#6aa9ff;color:#fff;border:none;">Get Next</button>
  </span>
</h1>

<div class="card" id="whoami">Checking login…</div>

<div class="card" id="voterCard" hidden>
  <div id="voterInfo" class="muted"></div>

  <h3>Call outcome</h3>
  <label for="outcome">Outcome</label>
  <select id="outcome">
    <option value="">— choose —</option>
    <option>connected</option><option>vm</option><option>no_answer</option>
    <option>wrong_number</option><option>refused</option><option>follow_up</option>
  </select>

  <div class="row">
    <label><input type="checkbox" id="ok_callback"> OK to call back</label>
    <label><input type="checkbox" id="requested_info"> Requested info</label>
    <label><input type="checkbox" id="dnc"> Do not call</label>
  </div>
  <div class="row">
    <div>
      <label for="best_day">Best day</label>
      <select id="best_day"><option value="">—</option>
        <option>Mon</option><option>Tue</option><option>Wed</option>
        <option>Thu</option><option>Fri</option><option>Sat</option><option>Sun</option>
      </select>
    </div>
    <div>
      <label for="best_time_window">Best time</label>
      <select id="best_time_window"><option value="">—</option>
        <option>Morning</option><option>Afternoon</option><option>Evening</option>
        <option>6–8pm</option>
      </select>
    </div>
  </div>

  <div class="row">
    <label><input type="checkbox" id="optin_sms"> Opt-in SMS</label>
    <label><input type="checkbox" id="optin_email"> Opt-in Email</label>
  </div>
  <label for="email">Email address (if provided)</label>
  <input type="text" id="email" placeholder="name@example.com"/>

  <div class="row">
    <label><input type="checkbox" id="wants_volunteer"> Wants to volunteer</label>
    <label><input type="checkbox" id="share_insights_ok"> OK to share insights</label>
  </div>
  <div class="row">
    <label><input type="checkbox" id="for_term_limits"> For term limits</label>
    <label><input type="checkbox" id="issue_public_lands"> Interested: public land sales</label>
  </div>
  <label for="comments">Comments</label>
  <textarea id="comments" rows="3"></textarea>

  <div class="row" style="margin-top:.75rem;">
    <button id="saveBtn">Save & Next</button>
    <button class="secondary" id="skipBtn" type="button">Skip</button>
  </div>
  <div id="msg" class="muted" style="margin-top:.5rem;"></div>
</div>

<div class="card" id="empty" hidden>No eligible voters (or not logged in).</div>

<script>
// Use same-origin Pages Functions API path.
window.API = (p) => '/api' + p;

const who = document.getElementById("whoami");
const voterCard = document.getElementById("voterCard");
const voterInfo = document.getElementById("voterInfo");
const empty = document.getElementById("empty");
const msg = document.getElementById("msg");

function setMsg(text, kind="muted") {
  msg.className = kind;
  msg.textContent = text || "";
}

async function jsonFetch(url, init = {}) {
  const r = await fetch(url, {
    credentials: "include",  // send Cloudflare Access cookies
    ...init,
    headers: { "content-type": "application/json", ...(init.headers || {}) },
  });
  if (r.status === 401) throw new Error("Unauthorized (Access required)");
  if (!r.ok) throw new Error(`HTTP ${r.status}`);
  const ct = r.headers.get("content-type") || "";
  return ct.includes("application/json") ? r.json() : r.text();
}

async function loadWho() {
  try {
    const j = await jsonFetch(API("/whoami"), { method:"GET", headers:{} });
    who.textContent = j && j.email ? ("Signed in as: " + j.email) : "Not signed in (Access required)";
  } catch (e) {
    who.innerHTML = `<span class="error">Unable to reach API: ${e.message}</span>`;
  }
}

async function nextVoter() {
  try {
    setMsg("Loading next voter…");
    const v = await jsonFetch(API("/call/next"), { method:"POST" });
    if (!v || !v.voter_id) {
      voterCard.hidden = true; empty.hidden = false; setMsg(""); return;
    }
    empty.hidden = true; voterCard.hidden = false;
    voterCard.dataset.voter = v.voter_id;
    const name = [v.first_name, v.last_name].filter(Boolean).join(" ");
    voterInfo.innerHTML =
      `<strong>${name || "—"}</strong><br/>` +
      `${v.ra_city || ""} ${v.ra_zip || ""} • Party: ${v.party || ""}<br/>` +
      `Phone: ${v.phone_e164 || "—"}`;
    setMsg("");
  } catch (e) {
    voterCard.hidden = true; empty.hidden = false;
    setMsg(`Error: ${e.message}`, "error");
  }
}

async function saveAndNext() {
  const payload = {
    voter_id: voterCard.dataset.voter || "",
    outcome: document.getElementById("outcome").value,
    ok_callback: +document.getElementById("ok_callback").checked,
    requested_info: +document.getElementById("requested_info").checked,
    dnc: +document.getElementById("dnc").checked,
    best_day: document.getElementById("best_day").value || null,
    best_time_window: document.getElementById("best_time_window").value || null,
    optin_sms: +document.getElementById("optin_sms").checked,
    optin_email: +document.getElementById("optin_email").checked,
    email: document.getElementById("email").value || null,
    wants_volunteer: +document.getElementById("wants_volunteer").checked,
    share_insights_ok: +document.getElementById("share_insights_ok").checked,
    for_term_limits: +document.getElementById("for_term_limits").checked,
    issue_public_lands: +document.getElementById("issue_public_lands").checked,
    comments: document.getElementById("comments").value || null
  };
  if (!payload.voter_id) { alert("No voter selected."); return; }
  if (!payload.outcome) { alert("Choose an outcome."); return; }

  try {
    setMsg("Saving…");
    await jsonFetch(API("/call/complete"), { method:"POST", body: JSON.stringify(payload) });
    // reset fields
    document.getElementById("outcome").value = "";
    document.getElementById("best_day").value = "";
    document.getElementById("best_time_window").value = "";
    document.getElementById("email").value = "";
    document.getElementById("comments").value = "";
    ["ok_callback","requested_info","dnc","optin_sms","optin_email",
     "wants_volunteer","share_insights_ok","for_term_limits","issue_public_lands"]
     .forEach(id => document.getElementById(id).checked = false);
    setMsg("Saved.", "muted");
    nextVoter();
  } catch (e) {
    setMsg(`Save failed: ${e.message}`, "error");
  }
}

document.getElementById("getNextBtn").addEventListener("click", nextVoter);
document.getElementById("saveBtn").addEventListener("click", saveAndNext);
document.getElementById("skipBtn").addEventListener("click", nextVoter);

// Keyboard shortcut: N = Get Next
window.addEventListener("keydown", (e) => {
  if (e.key.toLowerCase() === "n" && !e.metaKey && !e.ctrlKey && !e.altKey) {
    e.preventDefault();
    nextVoter();
  }
});

loadWho().then(nextVoter);
</script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const btn = document.getElementById("getNextBtn");
});
</script>
<script>window.getNext = typeof nextVoter!=="undefined" ? nextVoter : ()=>{};</script>



-- POST /api/ping


-- POST /api/call/next


